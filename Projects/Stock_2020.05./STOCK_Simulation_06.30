{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"STOCK_Simulation_06.30","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNdKwhjd0TlmtZdeWJJOd7E"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"HVQXK5XsiFXs","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":372},"executionInfo":{"status":"ok","timestamp":1594346955911,"user_tz":-540,"elapsed":3645,"user":{"displayName":"‍한승희[ 학부재학 / 물리학과 ]","photoUrl":"","userId":"03619866707726339561"}},"outputId":"73bab356-6d20-4656-b406-7626bbf6b731"},"source":["!nvidia-smi"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Fri Jul 10 02:09:13 2020       \n","+-----------------------------------------------------------------------------+\n","| NVIDIA-SMI 450.36.06    Driver Version: 418.67       CUDA Version: 10.1     |\n","|-------------------------------+----------------------+----------------------+\n","| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n","|                               |                      |               MIG M. |\n","|===============================+======================+======================|\n","|   0  Tesla T4            Off  | 00000000:00:04.0 Off |                    0 |\n","| N/A   41C    P8     9W /  70W |      0MiB / 15079MiB |      0%      Default |\n","|                               |                      |                 ERR! |\n","+-------------------------------+----------------------+----------------------+\n","                                                                               \n","+-----------------------------------------------------------------------------+\n","| Processes:                                                                  |\n","|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n","|        ID   ID                                                   Usage      |\n","|=============================================================================|\n","|  No running processes found                                                 |\n","+-----------------------------------------------------------------------------+\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kwIjgLfsiPe2","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"executionInfo":{"status":"ok","timestamp":1594347313324,"user_tz":-540,"elapsed":2143,"user":{"displayName":"‍한승희[ 학부재학 / 물리학과 ]","photoUrl":"","userId":"03619866707726339561"}},"outputId":"aaf3589c-fd2e-4324-cf50-a52898147367"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive',force_remount=True)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"maDUo4OciSBa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1594352756721,"user_tz":-540,"elapsed":5233088,"user":{"displayName":"‍한승희[ 학부재학 / 물리학과 ]","photoUrl":"","userId":"03619866707726339561"}},"outputId":"85202340-9858-4a25-8714-c188b70302b6"},"source":["#Pretraining, BESTPrediction, PeriodUpdate\n","import pandas as pd\n","import numpy as np\n","%tensorflow_version 2.x\n","import tensorflow as tf\n","from tensorflow.keras import layers, Sequential\n","from datetime import datetime\n","import glob\n","import gc\n","##############################################################################################################################\n","path='/content/gdrive/Shared drives/STOCK/version1/dataset/'\n","save_path='/content/gdrive/Shared drives/STOCK/simulation/models/'\n","trustval_path='/content/gdrive/Shared drives/STOCK/simulation/trustvalue/'\n","available_path='/content/gdrive/Shared drives/STOCK/simulation/available/available.csv'\n","seq_length=50\n","TARGET=2  #0: 종가 1: 시가 2: 고가 3: 저가\n","Today_TARGET=0  #0: 종가 1: 시가 2: 고가 3: 저가  -  내일 TARGET 과 비교해서 수익률을 계산할 오늘의 값\n","fromtime='1996.06.25'\n","##############################################################################################################################Only for Simulation\n","import time\n","SimulationDays=50\n","restdays=int(SimulationDays)\n","seed=1000000\n","UpdatePeriod=14\n","##############################################################################################################################\n","import resource\n","\n","def mem():\n","    print('Memory usage         : % 2.2f MB' % round(\n","        resource.getrusage(resource.RUSAGE_SELF).ru_maxrss/1024.0,1)\n","    )\n","##############################################################################################################################\n","\n","def datapreparation(restdays,KEY_path):\n","    data=pd.read_csv(open(KEY_path, encoding='euc-kr')).iloc[restdays:,:]\n","    data['null']=np.arange(data.shape[0])\n","    data=data.set_index('null')\n","    if int(data.loc[0,'거래량'])==0:          #FaceDivision 처리할 때 index out of range 를 방지하기 위함.\n","        data.loc[0,'거래량']=1\n","    if int(data.loc[data.shape[0]-1,'거래량'])==0:\n","        data.loc[data.shape[0]-1,'거래량']=1\n","    data.drop(['Unnamed: 0','전일비','날짜'],axis=1,inplace=True)\n","    data=data.reindex(index=data.index[::-1])\n","\n","    return data\n","\n","def FaceDivision(df):\n","    if np.isnan(df.to_numpy()).any():\n","        print(\"there exist NaN in raw data\")\n","        print(df[df==np.nan])\n","        raise NotImplementedError\n","    if df.loc[0,'시가']==0:            #거래정지처리\n","      df.loc[0,'시가']=df.loc[0,'종가']\n","    \n","    temp1=pd.DataFrame(df.to_numpy(),columns=df.columns)\n","    temp2=temp1.drop('거래량',axis=1)\n","    index1=list(temp1[temp1['거래량']==0].index) \n","    #비인기주는 아무도 관심을 주지 않아(...) 거래량이 0인 경우도 있다.\n","    #또한 액면분할은 여러번 있을 수 있다.\n","    if len(index1)>1:\n","      idx=[int(i) for i in range(len(index1)-1) if ( index1[i+1]-index1[i] ) > 1 ]\n","      idx.insert(0,-1)\n","      DivisionDays=list(   map(   lambda i:index1[idx[i]+1:idx[i+1]+1] , list(range(len(idx)-1))   )  )\n","      #DivisionDays=[ index1[idx[i]+1:idx[i+1]+1] for i in range(len(idx-1)) ]\n","      DivisionDays.append(index1[idx[-1]+1:])\n","      if len(DivisionDays[0])>0:\n","        for i in range(len(DivisionDays)):\n","            beforeDivision=temp2.loc[DivisionDays[i][0]-1,'종가']\n","            afterDivision=temp2.loc[DivisionDays[i][-1]+1,'시가']\n","            ratio=afterDivision/beforeDivision\n","            if 1/ratio>=1.5:                       #after 에 비해 before 가 1.5 배 이상이면 액면분할이라 가정\n","                temp2.loc[:DivisionDays[i][-1]]=temp2.loc[:DivisionDays[i][-1]]*ratio   #df의 slicing 은 거기까지 포함한다.       \n","\n","    return temp2\n","\n","def Emptyfill(df):            #종가가 모두 존재한다는 가정 하에 시가/고가/저가 항목이 비어있으면 채워준다.\n","    temp=np.array(df.loc[:,'종가'])\n","    temp=np.where(temp==0,np.nan,temp)\n","    assert ~np.isnan(temp).any(), \"there exist 0 in '종가' column\"\n","    \n","    for item in ['시가','고가','저가']:\n","        index1=list(df[df[item].map(int)==0].index)\n","        for each in index1:\n","            df.loc[each,item]=df.loc[each,'종가']\n","    \n","    return df\n","\n","def df2nps(df,seqlen):\n","    seq_len=seqlen+1\n","    temp=df.to_numpy()\n","    result=[ temp[i:i+seq_len,:] for i in range(df.shape[0]-seq_len) ]\n","        \n","    return np.array(result)\n","\n","def normalization_and_split(result,train_ratio,TARGET):\n","    denoms=np.array(list( map(lambda table: [ float(table[0,i]) for i in range(table.shape[1]) ] ,result) ))\n","    for table in result:\n","        for i in range(table.shape[1]):\n","            denominator=float(table[0,i])\n","            table[:,i]=(table[:,i]/denominator)-1\n","\n","    #sklearn 에서 자동으로 섞어주는게 있는데 그것보단 순서 고려해서 쪼개는게 좋은듯\n","    ratio=int(round(len(result)*train_ratio))\n","    train=result[:ratio,:,:]\n","    np.random.shuffle(train)\n","    x_train=train[:,:-1,:]\n","    y_train=train[:,-1,TARGET]\n","    \n","    x_test=result[ratio:,:-1,:]\n","    y_test=result[ratio:,-1,TARGET]\n","    denoms=denoms[ratio:,TARGET]\n","\n","    return x_train, y_train, x_test, y_test, denoms\n","\n","def trustValue(model,x_test,y_test,denoms):\n","    pred = model.predict(x_test)\n","    Ytest=(y_test+1)*denoms\n","    Ypred=(pred.reshape(pred.shape[0])+1)*denoms\n","    Ytest_pct=pd.Series(Ytest).pct_change().dropna()\n","    Ypred_pct=pd.Series(Ypred).pct_change().dropna()\n","    CORR=np.corrcoef(Ytest_pct.values,Ypred_pct.values)\n","\n","    return CORR[0,1]\n","\n","def Prediction(code):\n","    ###########################################################ImportModel\n","    model=tf.keras.models.load_model(save_path+code+'.h5')\n","    ###########################################################ImportTrustValue\n","    f=open(trustval_path+code+'.txt')\n","    T=float(  f.readline()  )\n","    f.close()\n","    ###########################################################\n","    data=Emptyfill( FaceDivision( datapreparation(restdays,path+code+'.csv') ) )\n","    data=data.iloc[data.shape[0]-seq_length:,:].to_numpy()\n","    Today=list(data[-1,:])\n","    temp=list(map(lambda i : float(data[0,i]) , list(range(data.shape[1]))  ) )\n","    for i in range(data.shape[1]):\n","        denominator=float(data[0,i])\n","        data[:,i]=(data[:,i]/denominator)-1\n","    ###########################################################\n","    data=data.reshape((1,seq_length,4))\n","    y=model.predict(data)\n","    TomorrowHigh=(y+1) * temp[TARGET]\n","    r=float(TomorrowHigh-Today[Today_TARGET])/float(Today[Today_TARGET])\n","    tf.keras.backend.clear_session()\n","    #def delete_me(obj):\n","    #    referrers = gc.get_referrers(obj)\n","    #    for referrer in referrers:\n","    #        if type(referrer) == dict:\n","    #            for key, value in referrer.items():\n","    #                if value is obj:\n","    #                    referrer[key] = None\n","    #delete_me(data)\n","    #delete_me(temp)\n","    #gc.collect()\n","    return Today,TomorrowHigh,r,r*T\n","\n","def PeriodDataPreparation(startP,endP,KEY_path):\n","    def dayCal(day):\n","        Y1=int(day[:4])\n","        M1=int(day[5:7])\n","        D1=int(day[8:])\n","        temp1=datetime(Y1,M1,D1)\n","        Y2=int(fromtime[:4])\n","        M2=int(fromtime[5:7])\n","        D2=int(fromtime[8:])\n","        temp2=datetime(Y2,M2,D2)\n","        return (temp1-temp2).days\n","\n","    def PeriodTrue(day):\n","        if day<=dayCal(endP) and day>=dayCal(startP):\n","            return True\n","        else:\n","            return False\n","    data=pd.read_csv(open(KEY_path, encoding='euc-kr'))\n","    index1=data[  data.loc[:,'날짜'].map(dayCal).map(PeriodTrue)  ].index\n","    data=data.iloc[index1[0]:index1[-1]+seq_length,:]  #start 로부터 49개만 더 필요함\n","    data['null']=np.arange(data.shape[0])      #뒤에 코딩할 때 다 loc 으로 해놔서 index 다시 밀어줘야 함...시불...\n","    data=data.set_index('null')\n","    if int(data.loc[0,'거래량'])==0:          #FaceDivision 처리할 때 index out of range 를 방지하기 위함.\n","        data.loc[0,'거래량']=1\n","    if int(data.loc[data.shape[0]-1,'거래량'])==0:\n","        data.loc[data.shape[0]-1,'거래량']=1\n","    data.drop(['Unnamed: 0','전일비','날짜'],axis=1,inplace=True)\n","    data=data.reindex(index=data.index[::-1])\n","\n","    return data\n","\n","def Periodnormalization_and_split(result,TARGET):\n","    for table in result:\n","        for i in range(table.shape[1]):\n","            denominator=float(table[0,i])\n","            table[:,i]=(table[:,i]/denominator)-1\n","    x_test=result[:,:-1,:]\n","    y_test=result[:,-1,TARGET]\n","\n","    return x_test, y_test\n","##############################################################################################################################주요함수들 - 실사용시 restdays=0 넣으면 될듯?\n","#Pretraining : 모든 available.csv 에 대해\n","#BESTPrediction : 모든 model.h5 에 대해\n","#PeriodUpdate  : 모든 model.h5 에 대해\n","def Pretraining(restdays):\n","    KEY_paths=pd.read_csv(open(available_path)).drop('Unnamed: 0',axis=1)\n","    avail=list(KEY_paths.values.reshape((KEY_paths.shape[0])))\n","    fail=[]\n","    with tf.device('/device:GPU:0'):\n","      for KEY_path in KEY_paths.values:\n","        try:\n","          print(\"Processing with index :\",KEY_path[0][-10:-4])\n","          avail.remove(KEY_path[0])\n","          data=datapreparation(restdays,KEY_path[0])\n","          data= FaceDivision(data)\n","          data=Emptyfill(data)\n","          #print(\"Data Length :\",data.shape[0])\n","          result=df2nps( data, seq_length )\n","          x_train, y_train, x_test, y_test, denoms = normalization_and_split(result,0.9,TARGET)\n","\n","          model=Sequential()  #LSTM, adam 이 그나마 나음.\n","          model.add( layers.LSTM(50, return_sequences=True,input_shape=(50,4)) )\n","          model.add( layers.LSTM(64, return_sequences=False))\n","          model.add( layers.Dense(1, activation='linear'))\n","          model.compile(loss='MSE',optimizer='adam')\n","\n","          history=model.fit(x_train,y_train,epochs=10,batch_size=10,verbose=0)   #여기에서 시간이 오래걸림\n","          print('Loss at Epoch 10 :',history.history[ 'loss' ][-1])\n","          if history.history[ 'loss' ][-1]<0.001:\n","            model.fit(x_train,y_train,epochs=10,batch_size=10,verbose=0)\n","            T=trustValue(model,x_test,y_test,denoms)\n","            model.fit(x_test,y_test,epochs=1,batch_size=10,verbose=0)     #신뢰도 구성 후 test 값도 업데이트 해줌.\n","            model.save(save_path+KEY_path[0][-10:-4]+'.h5')\n","            print(\"Correlation Coefficient :\",T,\"\\n\")\n","            f = open(trustval_path+KEY_path[0][-10:-4]+'.txt', \"w\")\n","            f.write(str(T))\n","            f.close()\n","          else:\n","            print('loss is not converging. Pass\\n')\n","        except KeyboardInterrupt:\n","            avail.insert(0,KEY_path[0])\n","            av=pd.Series(avail)\n","            av.to_csv(available_path)\n","            ff=pd.Series(fail)\n","            thistime=datetime.now()\n","            ff.to_csv(available_path[:-13]+'ErrorLog '+str(thistime)+'.csv')\n","            import sys \n","            sys.exit(0)\n","        except:\n","            print('Error')\n","            fail.append(KEY_path[0])\n","            pass\n","    av=pd.Series(avail)\n","    av.to_csv(available_path)\n","    ff=pd.Series(fail)\n","    thistime=datetime.now()\n","    ff.to_csv(available_path[:-13]+'ErrorLog '+str(thistime)+'.csv')\n","    print('ALL MODEL FOR ALL AVAILABLE INDEXES HAS BEEN MADE')\n","\n","def BESTPrediction(restdays):\n","    files=glob.glob(save_path[:-1]+'/*.h5')\n","    codeNtrusted={}\n","    for codepath in files:\n","        try:\n","          code=codepath.replace('\\\\','/')[-9:-3]\n","          #print('processing with code :',code)\n","          with tf.device('/device:GPU:0'):\n","            _,_,_,trusted=Prediction(code)\n","          codeNtrusted.setdefault(trusted,[]).append(code)\n","        except KeyboardInterrupt:\n","            import sys\n","            sys.exit(0)\n","        except:\n","            print('Prediction about index',code,'failed. Pass')\n","            pass\n","    MaximumTrust=max(codeNtrusted.keys())\n","    codes=codeNtrusted[MaximumTrust]\n","\n","    TodayEnd=[] #only for simul\n","    percentages=[]\n","    PredictHigh=[]\n","\n","    for code in codes:  # codes : 모든 학습된 종목들\n","        with tf.device('/device:GPU:0'):\n","          Today,TomorrowHigh,r,trusted=Prediction(code)\n","        #print(\"code :\",code,\"Today :\",Today,\"Predicted Tomorrow High :\",int(TomorrowHigh[0]),'Predicted benefit : {}'.format(r*100),'Corr :',trusted/r)\n","        TodayEnd.append(int(Today[0]))\n","        percentages.append(round(r*100,2))\n","        PredictHigh.append(int(TomorrowHigh[0]))\n","    return codes,TodayEnd,percentages,PredictHigh\n","\n","\n","def PeriodUpdate(startP,endP):\n","    files=glob.glob(save_path[:-1]+'/*.h5')\n","    for codepath in files:\n","        try:\n","            code=codepath.replace('\\\\','/')[-9:-3]\n","            #print('processing with code :',code)\n","            data=PeriodDataPreparation(startP,endP,path+code+'.csv')\n","            data=FaceDivision(data)\n","            data=Emptyfill(data)\n","            #print(\"Data Length :\",data.shape[0])\n","            result=df2nps( data, seq_length )\n","            x_test, y_test = Periodnormalization_and_split(result,TARGET)\n","            model=tf.keras.models.load_model(save_path+code+'.h5')\n","            with tf.device('/device:GPU:0'):\n","              model.fit(x_test,y_test,epochs=1,batch_size=1,verbose=0)   #여기에서 시간이 오래걸림\n","            model.save(save_path+code+'.h5')\n","        except KeyboardInterrupt:\n","            import sys\n","            sys.exit(0)\n","        except:\n","            print('Update about index',code,'failed. Pass')\n","            pass\n","    print(\"ALL MODEL UPDATE FOR PERIOD\",startP,\"TO\",endP,\"HAS FINISHED\")\n","##############################################################################################################################\n","\n","if __name__=='__main__':        # 최초 seed 는 100만원 입니다.\n","    Pretraining(SimulationDays) # 가진 데이터의 마지막 날 - SimulationDays 만큼 학습시킴\n","    codes=[]                    # 전날 예측한 가장 높은 코드를 저장 (중복 가능)\n","    NUM=[]                      # codes 에 저장된 종목을 얼마나 구매했는지 저장\n","    Today_temp=[]               # 날짜를 지속 저장\n","    for i in range(SimulationDays+1):\n","      Today=pd.read_csv(open(path+'005930.csv', encoding='euc-kr')).iloc[restdays,1] # 오래된 주식 기준 날짜 선정\n","      Today_temp.append(Today)\n","      print('\\n',Today)\n","\n","      if len(codes)>0 and len(NUM)>0:    # SELL\n","        for j in range(len(codes)):\n","          Predicted_Price=PredictHigh[j]\n","          High_Price=pd.read_csv(open(path+codes[j]+'.csv', encoding='euc-kr')).iloc[restdays,5]\n","          End_Price=pd.read_csv(open(path+codes[j]+'.csv', encoding='euc-kr')).iloc[restdays,2]   #종가에 파는 것으로 가정. \n","          #0: Unnamed 1: 날짜 2: 종가 3: 변화량 4: 시가 5: 고가 6: 저가 7: 거래량\n","          if Predicted_Price<=High_Price:\n","            Sell_price=Predicted_Price\n","          else:\n","            Sell_price=End_Price\n","          seed+=NUM[j]*Sell_price\n","          print(\"today high :\",High_Price,\" today end :\",End_Price)\n","          print(\"sold\",NUM[j],codes[j],\"at price\",Sell_price)\n","          print(\"restdays :\",restdays,\"seed :\",seed)\n","        codes=[]\n","        NUM=[]\n","\n","      if i<SimulationDays:    # BUY\n","        mem()\n","        codes,TodayEnd,percentages,PredictHigh=BESTPrediction(restdays)  # 다음날 살 종목을 정함\n","        mem()\n","        for percentage in percentages:\n","          if percentage>2:\n","            l=len(codes)\n","            temp=seed/l   # 가진 seed 를 codes 에 있는 종목들에 분산투자\n","            NUM=[]\n","            for j in range(l):\n","              num=int(temp/TodayEnd[j])   #오늘 종가에 사는 것으로 가정\n","              NUM.append(num)\n","              seed-=num*TodayEnd[j]\n","              print(\"bought\",num,codes[j],\"at price\",TodayEnd[j],\" predicted tomorrow high :\",PredictHigh[j])\n","          else:\n","             print(\"nothing to buy today\")\n","      \n","      if len(Today_temp)==UpdatePeriod:    # UpdatePeriod 마다 추가학습 시켜줌\n","        PeriodUpdate(Today_temp[0],Today_temp[-1])\n","        Today_temp=[]\n","\n","      restdays-=1\n","    print(\"Total gain :\",round((seed-1000000)/1000000,2)*100,\"%\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:250: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n","/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:252: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n"],"name":"stderr"},{"output_type":"stream","text":["ALL MODEL FOR ALL AVAILABLE INDEXES HAS BEEN MADE\n","\n"," 2020.02.18\n","Memory usage         :  2776.20 MB\n","Memory usage         :  2871.50 MB\n","bought 30 002310 at price 32700  predicted tomorrow high : 33409\n","\n"," 2020.02.19\n","today high : 34650.0  today end : 34550.0\n","sold 30 002310 at price 33409\n","restdays : 49 seed : 1021270\n","Memory usage         :  2871.50 MB\n","Memory usage         :  2875.90 MB\n","bought 29 002310 at price 34550  predicted tomorrow high : 35526\n","\n"," 2020.02.20\n","today high : 35300.0  today end : 34450.0\n","sold 29 002310 at price 34450.0\n","restdays : 48 seed : 1018370.0\n","Memory usage         :  2875.90 MB\n","Memory usage         :  2875.90 MB\n","bought 3 004170 at price 270000  predicted tomorrow high : 280334\n","\n"," 2020.02.21\n","today high : 273500.0  today end : 264000.0\n","sold 3 004170 at price 264000.0\n","restdays : 47 seed : 1000370.0\n","Memory usage         :  2875.90 MB\n","Memory usage         :  2878.50 MB\n","bought 27 002310 at price 35750  predicted tomorrow high : 36801\n","\n"," 2020.02.24\n","today high : 37350.0  today end : 35200.0\n","sold 27 002310 at price 36801\n","restdays : 46 seed : 1028747.0\n","Memory usage         :  2878.50 MB\n","Memory usage         :  2878.50 MB\n","bought 3 004370 at price 280000  predicted tomorrow high : 291258\n","\n"," 2020.02.25\n","today high : 285500.0  today end : 277000.0\n","sold 3 004370 at price 277000.0\n","restdays : 45 seed : 1019747.0\n","Memory usage         :  2878.50 MB\n","Memory usage         :  2878.90 MB\n","bought 112 005950 at price 9050  predicted tomorrow high : 9448\n","\n"," 2020.02.26\n","today high : 9470.0  today end : 9060.0\n","sold 112 005950 at price 9448\n","restdays : 44 seed : 1064323.0\n","Memory usage         :  2878.90 MB\n","Memory usage         :  2878.90 MB\n","bought 32 002310 at price 32850  predicted tomorrow high : 33785\n","\n"," 2020.02.27\n","today high : 33750.0  today end : 31600.0\n","sold 32 002310 at price 31600.0\n","restdays : 43 seed : 1024323.0\n","Memory usage         :  2878.90 MB\n","Memory usage         :  2879.40 MB\n","bought 32 002310 at price 31600  predicted tomorrow high : 32751\n","\n"," 2020.02.28\n","today high : 31300.0  today end : 30200.0\n","sold 32 002310 at price 30200.0\n","restdays : 42 seed : 979523.0\n","Memory usage         :  2879.40 MB\n","Memory usage         :  2880.20 MB\n","bought 32 002310 at price 30200  predicted tomorrow high : 31154\n","\n"," 2020.03.02\n","today high : 31450.0  today end : 31150.0\n","sold 32 002310 at price 31154\n","restdays : 41 seed : 1010051.0\n","Memory usage         :  2880.20 MB\n","Memory usage         :  2880.20 MB\n","bought 32 002310 at price 31150  predicted tomorrow high : 32149\n","\n"," 2020.03.03\n","today high : 31900.0  today end : 30650.0\n","sold 32 002310 at price 30650.0\n","restdays : 40 seed : 994051.0\n","Memory usage         :  2880.20 MB\n","Memory usage         :  2880.20 MB\n","bought 32 002310 at price 30650  predicted tomorrow high : 31636\n","\n"," 2020.03.04\n","today high : 30800.0  today end : 30700.0\n","sold 32 002310 at price 30700.0\n","restdays : 39 seed : 995651.0\n","Memory usage         :  2880.20 MB\n","Memory usage         :  2880.60 MB\n","bought 32 002310 at price 30700  predicted tomorrow high : 31621\n","\n"," 2020.03.05\n","today high : 31350.0  today end : 31050.0\n","sold 32 002310 at price 31050.0\n","restdays : 38 seed : 1006851.0\n","Memory usage         :  2880.60 MB\n","Memory usage         :  2880.60 MB\n","bought 32 002310 at price 31050  predicted tomorrow high : 31908\n","\n"," 2020.03.06\n","today high : 31000.0  today end : 30300.0\n","sold 32 002310 at price 30300.0\n","restdays : 37 seed : 982851.0\n","Memory usage         :  2880.60 MB\n","Memory usage         :  2880.70 MB\n","bought 32 002310 at price 30300  predicted tomorrow high : 31023\n","ALL MODEL UPDATE FOR PERIOD 2020.02.18 TO 2020.03.06 HAS FINISHED\n","\n"," 2020.03.09\n","today high : 30100.0  today end : 29300.0\n","sold 32 002310 at price 29300.0\n","restdays : 36 seed : 950851.0\n","Memory usage         :  3717.70 MB\n","Memory usage         :  3796.30 MB\n","bought 805 002070 at price 1180  predicted tomorrow high : 1305\n","\n"," 2020.03.10\n","today high : 1140.0  today end : 1120.0\n","sold 805 002070 at price 1120.0\n","restdays : 35 seed : 902551.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 805 002070 at price 1120  predicted tomorrow high : 1171\n","\n"," 2020.03.11\n","today high : 1155.0  today end : 1060.0\n","sold 805 002070 at price 1060.0\n","restdays : 34 seed : 854251.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 805 002070 at price 1060  predicted tomorrow high : 1131\n","\n"," 2020.03.12\n","today high : 1075.0  today end : 1000.0\n","sold 805 002070 at price 1000.0\n","restdays : 33 seed : 805951.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 805 002070 at price 1000  predicted tomorrow high : 1050\n","\n"," 2020.03.13\n","today high : 978.0  today end : 936.0\n","sold 805 002070 at price 936.0\n","restdays : 32 seed : 754431.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 36 003490 at price 20600  predicted tomorrow high : 21815\n","\n"," 2020.03.16\n","today high : 21700.0  today end : 20100.0\n","sold 36 003490 at price 20100.0\n","restdays : 31 seed : 736431.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 36 003490 at price 20100  predicted tomorrow high : 21525\n","\n"," 2020.03.17\n","today high : 21000.0  today end : 19800.0\n","sold 36 003490 at price 19800.0\n","restdays : 30 seed : 725631.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 36 003490 at price 19800  predicted tomorrow high : 21249\n","\n"," 2020.03.18\n","today high : 20050.0  today end : 18100.0\n","sold 36 003490 at price 18100.0\n","restdays : 29 seed : 664431.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 800 002070 at price 830  predicted tomorrow high : 924\n","\n"," 2020.03.19\n","today high : 900.0  today end : 691.0\n","sold 800 002070 at price 691.0\n","restdays : 28 seed : 553231.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 800 002070 at price 691  predicted tomorrow high : 787\n","\n"," 2020.03.20\n","today high : 747.0  today end : 721.0\n","sold 800 002070 at price 721.0\n","restdays : 27 seed : 577231.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 37 003490 at price 15250  predicted tomorrow high : 17910\n","\n"," 2020.03.23\n","today high : 15650.0  today end : 14300.0\n","sold 37 003490 at price 14300.0\n","restdays : 26 seed : 542081.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 37 003490 at price 14300  predicted tomorrow high : 16514\n","\n"," 2020.03.24\n","today high : 15200.0  today end : 15000.0\n","sold 37 003490 at price 15000.0\n","restdays : 25 seed : 567981.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 37 003490 at price 15000  predicted tomorrow high : 17379\n","\n"," 2020.03.25\n","today high : 18100.0  today end : 17350.0\n","sold 37 003490 at price 17379\n","restdays : 24 seed : 656004.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 37 003490 at price 17350  predicted tomorrow high : 19823\n","\n"," 2020.03.26\n","today high : 20200.0  today end : 18350.0\n","sold 37 003490 at price 19823\n","restdays : 23 seed : 747505.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 958 002070 at price 780  predicted tomorrow high : 868\n","ALL MODEL UPDATE FOR PERIOD 2020.03.09 TO 2020.03.26 HAS FINISHED\n","\n"," 2020.03.27\n","today high : 843.0  today end : 800.0\n","sold 958 002070 at price 800.0\n","restdays : 22 seed : 766665.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 71 008500 at price 10700  predicted tomorrow high : 12552\n","\n"," 2020.03.30\n","today high : 10900.0  today end : 10350.0\n","sold 71 008500 at price 10350.0\n","restdays : 21 seed : 741815.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 2 002270 at price 307000  predicted tomorrow high : 332501\n","\n"," 2020.03.31\n","today high : 307500.0  today end : 300000.0\n","sold 2 002270 at price 300000.0\n","restdays : 20 seed : 727815.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 3 006400 at price 240500  predicted tomorrow high : 266445\n","\n"," 2020.04.01\n","today high : 244500.0  today end : 231000.0\n","sold 3 006400 at price 231000.0\n","restdays : 19 seed : 699315.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 3 006400 at price 231000  predicted tomorrow high : 259639\n","\n"," 2020.04.02\n","today high : 233500.0  today end : 233000.0\n","sold 3 006400 at price 233000.0\n","restdays : 18 seed : 705315.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 12 005180 at price 57000  predicted tomorrow high : 64191\n","\n"," 2020.04.03\n","today high : 56300.0  today end : 52400.0\n","sold 12 005180 at price 52400.0\n","restdays : 17 seed : 650115.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 2 006400 at price 231500  predicted tomorrow high : 265886\n","\n"," 2020.04.06\n","today high : 240000.0  today end : 240000.0\n","sold 2 006400 at price 240000.0\n","restdays : 16 seed : 667115.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 2 006400 at price 240000  predicted tomorrow high : 268748\n","\n"," 2020.04.07\n","today high : 251000.0  today end : 245000.0\n","sold 2 006400 at price 245000.0\n","restdays : 15 seed : 677115.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 2 006400 at price 245000  predicted tomorrow high : 273243\n","\n"," 2020.04.08\n","today high : 256000.0  today end : 250000.0\n","sold 2 006400 at price 250000.0\n","restdays : 14 seed : 687115.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 2 006400 at price 250000  predicted tomorrow high : 279452\n","\n"," 2020.04.09\n","today high : 256500.0  today end : 253000.0\n","sold 2 006400 at price 253000.0\n","restdays : 13 seed : 693115.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 2 006400 at price 253000  predicted tomorrow high : 278594\n","\n"," 2020.04.10\n","today high : 254000.0  today end : 250500.0\n","sold 2 006400 at price 250500.0\n","restdays : 12 seed : 688115.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 2 006400 at price 250500  predicted tomorrow high : 272056\n","\n"," 2020.04.13\n","today high : 248500.0  today end : 241500.0\n","sold 2 006400 at price 241500.0\n","restdays : 11 seed : 670115.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 2 006400 at price 241500  predicted tomorrow high : 271675\n","\n"," 2020.04.14\n","today high : 252500.0  today end : 251500.0\n","sold 2 006400 at price 251500.0\n","restdays : 10 seed : 690115.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 2 006400 at price 251500  predicted tomorrow high : 284255\n","\n"," 2020.04.16\n","today high : 271500.0  today end : 271000.0\n","sold 2 006400 at price 271000.0\n","restdays : 9 seed : 729115.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 2 006400 at price 271000  predicted tomorrow high : 300513\n","ALL MODEL UPDATE FOR PERIOD 2020.03.27 TO 2020.04.16 HAS FINISHED\n","\n"," 2020.04.17\n","today high : 305000.0  today end : 286500.0\n","sold 2 006400 at price 300513\n","restdays : 8 seed : 788141.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 14 005180 at price 54200  predicted tomorrow high : 57916\n","\n"," 2020.04.20\n","today high : 56800.0  today end : 55500.0\n","sold 14 005180 at price 55500.0\n","restdays : 7 seed : 806341.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 14 005180 at price 55500  predicted tomorrow high : 58799\n","\n"," 2020.04.21\n","today high : 56000.0  today end : 55900.0\n","sold 14 005180 at price 55900.0\n","restdays : 6 seed : 811941.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 14 005180 at price 55900  predicted tomorrow high : 58841\n","\n"," 2020.04.22\n","today high : 56200.0  today end : 55700.0\n","sold 14 005180 at price 55700.0\n","restdays : 5 seed : 809141.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 14 005180 at price 55700  predicted tomorrow high : 59049\n","\n"," 2020.04.23\n","today high : 57200.0  today end : 57200.0\n","sold 14 005180 at price 57200.0\n","restdays : 4 seed : 830141.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 14 005180 at price 57200  predicted tomorrow high : 60652\n","\n"," 2020.04.24\n","today high : 60000.0  today end : 59600.0\n","sold 14 005180 at price 59600.0\n","restdays : 3 seed : 863741.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 14 005180 at price 59600  predicted tomorrow high : 62357\n","\n"," 2020.04.27\n","today high : 63900.0  today end : 63900.0\n","sold 14 005180 at price 62357\n","restdays : 2 seed : 902339.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 302 004150 at price 2980  predicted tomorrow high : 3178\n","\n"," 2020.04.28\n","today high : 3085.0  today end : 3000.0\n","sold 302 004150 at price 3000.0\n","restdays : 1 seed : 908379.0\n","Memory usage         :  3796.30 MB\n","Memory usage         :  3796.30 MB\n","bought 302 004150 at price 3000  predicted tomorrow high : 3199\n","\n"," 2020.04.29\n","today high : 0.0  today end : 3000.0\n","sold 302 004150 at price 3000.0\n","restdays : 0 seed : 908379.0\n","Total gain : -9.0 %\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FnZuAA4D8UXv","colab_type":"code","colab":{}},"source":["import resource\n","\n","def mem():\n","    print('Memory usage         : % 2.2f MB' % round(\n","        resource.getrusage(resource.RUSAGE_SELF).ru_maxrss/1024.0,1)\n","    )\n","\n","mem()"],"execution_count":null,"outputs":[]}]}